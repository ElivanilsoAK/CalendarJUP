rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserInOrg(orgId) {
      return isAuthenticated() && exists(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid));
    }

    function isOrgOwner(orgId) {
      return isAuthenticated() && get(/databases/$(database)/documents/organizations/$(orgId)).data.owner == request.auth.uid;
    }

    function isOrgAdmin(orgId) {
      return isAuthenticated() && (
        isOrgOwner(orgId) ||
        (exists(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid)).data.role in ['admin', 'owner'])
      );
    }

    function isOrgMember(orgId) {
      return isAuthenticated() && exists(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid));
    }

    // --- Rules for Collections ---

    // Organizations Collection
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      allow create: if isAuthenticated();
      allow update: if isOrgAdmin(orgId);
      allow delete: if false;

      // Members Subcollection
      match /members/{memberId} {
        allow read: if isOrgMember(orgId);
        allow create: if isOrgAdmin(orgId);
        allow update: if isOrgAdmin(orgId) || request.auth.uid == memberId;
        allow delete: if isOrgAdmin(orgId) && memberId != request.auth.uid;
      }

      // Calendars Subcollection
      match /calendars/{calendarId} {
        allow read: if isOrgMember(orgId);
        allow create, update, delete: if isOrgAdmin(orgId);
      }

      // Holidays Subcollection
      match /holidays/{holidayId} {
        allow read: if isOrgMember(orgId);
        allow create, update, delete: if isOrgAdmin(orgId);
      }

      // Vacations Subcollection
      match /vacations/{vacationId} {
        allow read: if isOrgMember(orgId);
        allow create: if isOrgMember(orgId) && request.auth.uid == resource.data.userId;
        allow update: if isOrgAdmin(orgId) || (isOrgMember(orgId) && request.auth.uid == resource.data.userId);
        allow delete: if isOrgAdmin(orgId) || (isOrgMember(orgId) && request.auth.uid == resource.data.userId);
      }

      // Notifications Subcollection
      match /notifications/{notificationId} {
        allow read: if isOrgMember(orgId) && request.auth.uid == resource.data.userId;
        allow create: if isOrgMember(orgId);
        allow update: if isOrgMember(orgId) && request.auth.uid == resource.data.userId;
        allow delete: if false; // Notificações não são deletadas
      }
    }

    // Users Collection
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow read: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false;
    }

    // Invites Collection
    match /invites/{inviteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
  }
}
